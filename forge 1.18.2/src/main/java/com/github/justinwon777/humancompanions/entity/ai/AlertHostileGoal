package com.github.justinwon777.humancompanions.entity.ai;

import com.github.justinwon777.humancompanions.entity.CompanionData;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal;
import net.minecraft.world.entity.animal.Animal;
import net.minecraft.world.entity.monster.Monster;
import net.minecraft.world.entity.player.Player;
import org.jetbrains.annotations.Nullable;

import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class AlertHostileGoal<T extends LivingEntity> extends NearestAttackableTargetGoal<T> {
    public AlertHostileGoal(Mob pMob, Class<T> pTargetType, boolean pMustSee) {
        super(pMob, pTargetType, pMustSee);
    }

    public AlertHostileGoal(Mob pMob, Class<T> pTargetType, boolean pMustSee, Predicate<LivingEntity> pTargetPredicate) {
        super(pMob, pTargetType, pMustSee, pTargetPredicate);
    }

    public AlertHostileGoal(Mob pMob, Class<T> pTargetType, boolean pMustSee, boolean pMustReach) {
        super(pMob, pTargetType, pMustSee, pMustReach);
    }

    public AlertHostileGoal(Mob pMob, Class<T> pTargetType, int pRandomInterval, boolean pMustSee, boolean pMustReach, @Nullable Predicate<LivingEntity> pTargetPredicate) {
        super(pMob, pTargetType, pRandomInterval, pMustSee, pMustReach, pTargetPredicate);
    }

    @Override
    protected void findTarget() {
        if (this.targetType != Player.class && this.targetType != ServerPlayer.class) {
            var nearbyEntities = this.mob.level.getEntities(this.mob, this.getTargetSearchArea(this.getFollowDistance()));
            var livingEntities = nearbyEntities.stream().map(e -> {

                var isHostile = false;
                if (e instanceof Monster monster) {
                    if (Arrays.stream(CompanionData.aggroMobs).anyMatch(aClass -> aClass == e.getType())) {
                        var target = monster.getTarget();
                        var monsterTargetToSelfOrAlly = target != null && (target.getType() == EntityType.PLAYER || target.getType() == this.mob.getType());
                        var monsterIsAggressiveAndTargetingSelfOrAlly = monsterTargetToSelfOrAlly && monster.isAggressive();
                        if (monsterIsAggressiveAndTargetingSelfOrAlly)
                            isHostile = true;
                    } else {
                        isHostile = true;
                    }

                } else if (e instanceof Animal animal && !(e instanceof TamableAnimal ta && ta.isTame())) {
                    var target = animal.getTarget();
                    if (target != null && (target.getType() == EntityType.PLAYER || target.getType() == this.mob.getType()))
                        isHostile = true;
                }
                if (isHostile)
                    return (LivingEntity) e;
                return null;
            }).filter(Objects::nonNull).collect(Collectors.toList());

            this.target = this.mob.level.getNearestEntity(livingEntities, this.targetConditions, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
        } else {
            this.target = this.mob.level.getNearestPlayer(this.targetConditions, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
        }
    }
}
